# -*- coding: utf-8 -*-
"""lunar_lander_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11elDf8h4hkyxevKwf0FMf4aRxcBNq2d9
"""

import json
import numpy as np
import matplotlib.pyplot as plt

def read_log(f_path):
  with open(f_path, 'r') as f:
    return json.loads(f.read())

def get_rewards(f_name):
  logs = read_log(f_name)
  data = logs['rewards_per_episode']
  return [d[2] for d in data]

def get_avg_rewards(f_name):
  rewards = get_rewards(f_name)
  epoch_count = []
  avg_rewards = []
  for i in range(100, len(rewards)):
    avg_rewards.append(sum(rewards[i-100:i])/ 100)
    epoch_count.append(i)
  return epoch_count, avg_rewards

def get_avg_rewards_new(rewards):
  epoch_count = []
  avg_rewards = []
  for i in range(100, len(rewards)):
    avg_rewards.append(sum(rewards[i-100:i])/ 100)
    epoch_count.append(i)
  return epoch_count, avg_rewards



# [[d[3], d[2]] for d in data if d[2] > 100]

sum([d[3] for d in data[:500]])/ 500

sum([d[3] for d in data[-500:]])/ 500

epochs = [l[0] for l in data]

reward = [l[2] for l in data]

plt.plot(epochs, reward, color='blue', marker='o')
plt.title('$\lambda$ Vs Mean Error', fontsize=14)
plt.xlabel('$\lambda$', fontsize=14)
plt.ylabel('Mean Error', fontsize=14)
plt.grid(True)
plt.show()
# plt.savefig('plots/figure_1.png')
# plt.clf()

rewards = read_log('resources/final.json')

plt.plot(epochs, reward, color='blue')
plt.title('$\lambda$ Vs Mean Error', fontsize=14)
plt.xlabel('$\lambda$', fontsize=14)
plt.ylabel('Mean Error', fontsize=14)
plt.grid(True)
plt.show()

rewards = []
with open('resources/success_train.txt', 'r') as f:
  lines = f.readlines()
  for idx, l in enumerate(lines):
    # print(idx)
    rewards.append(float(l.split("=")[1].strip()))

json.dumps(rewards)

with open('resources/final.json', 'w') as f:
  f.write(json.dumps(rewards))

epocs = [i + 1 for i  in range(len(rewards))]

# epocs
plt.plot(epocs, rewards, color='blue')
plt.title('Rewards Vs Episodes', fontsize=14)
plt.xlabel('Episodes', fontsize=14)
plt.ylabel('Rewards', fontsize=14)
# plt.plot(epocs, epsilons, color='red')
plt.grid(True)
plt.legend()
# plt.savefig('plots/figure_3.png')
plt.show()

plt.savefig('plots/figure_3.png')
# plt.clf()

rewards = read_log('resources/final.json')

# rewards

plt.plot(epoch_count, avg_rewards, color='blue')
plt.title('Cumulative rewards over 100 episodes per episode', fontsize=14)
plt.xlabel('Episodes', fontsize=14)
plt.ylabel('Avg Reward over last 100 steps', fontsize=14)
plt.grid(True)
plt.savefig('plots/figure_2.png')
plt.show()

plt.plot(epoch_count, avg_rewards, color='blue')
plt.title('Rewards Vs Episodes', fontsize=14)
plt.xlabel('Episodes', fontsize=14)
plt.ylabel('Rewards', fontsize=14)
plt.grid(True)
plt.savefig('plots/figure_2.png')
# plt.show()

sum(rewards[969:])/100

init_epsilon = 1.0
final_epsilon = 0.1
def get_epsilon_value(episode_count):
          # decayed_epsilon = round(self.init_epsilon * (self.epsilon_decay_rate ** ((self.episode_count - 50) / 10)),2)
    decayed_epsilon = init_epsilon - int((episode_count) / 10) * 0.01
    return max(decayed_epsilon, final_epsilon)

epsilons = [get_epsilon_value(i) for i in range(1, 1070)]

len(rewards)

len(epsilons)

# for i, e in enumerate(epsilons):
#   print(f"{i} -> {e}")

plt.plot(epocs, epsilons, color='red')
plt.title('Rewards Vs Episodes', fontsize=14)
plt.xlabel('Episodes', fontsize=14)
plt.ylabel('Rewards', fontsize=14)
# plt.plot(epocs, epsilons, color='red')
plt.grid(True)
plt.legend()
plt.savefig('plots/figure_4.png')

h3_e9_e, h3_e9_r  = get_avg_rewards(rewards)

type(rewards)

h2_e1 = get_rewards('resources/h2_e1.json')
h2_e8 = get_rewards('resources/h2_e8.json')
h2_e9 = get_rewards('resources/h2_e9.json')

# Graph 5 : 
# epocs
e1, a1 = get_avg_rewards(h2_e1)
e8, a8 = get_avg_rewards(h2_e8)
e9, a9 = get_avg_rewards(h2_e9)

# plt.plot(e1, a1, color='blue', label='$\epsilon$=1')
plt.plot(h3_e9_e, h3_e9_r, color='red', label='$\epsilon$ for 2 hidden layers')
plt.plot(e9, a9, color='black', label='$\epsilon$ for 3 hidden layers')
plt.title('Cumulative Rewards per 100 episodes for $\epsilon$=0.9', fontsize=14)
plt.xlabel('Episodes', fontsize=14)
plt.ylabel('Reward', fontsize=14)
# plt.plot(epocs, epsilons, color='red')
plt.grid(True)
plt.legend()
plt.savefig('plots/figure_4.png')
plt.show()

rewards_f = read_log('resources/final.json')

e9, a9 =get_avg_rewards_new(rewards_f)

# e9, a9 = get_avg_rewards('resources/gamma_0.9.json')
e7, a7 = get_avg_rewards('resources/gamma_0.7.json')
e2, a2 = get_avg_rewards('resources/gamma_0.2.json')
e5, a5 = get_avg_rewards('resources/gamma_0.5.json')

# e1, a1 = get_avg_rewards(h2_e1)
# e8, a8 = get_avg_rewards(h2_e8)
# e9, a9 = get_avg_rewards(h2_e9)

# plt.plot(e1, a1, color='blue', label='$\epsilon$=1')
plt.plot(e2, a2, color='red', label='$\gamma$ = 0.2')
plt.plot(e9, a9, color='black', label='$\gamma$ = 0.9')
plt.plot(e7, a7, color='blue', label='$\gamma$ = 0.7')
plt.plot(e5, a5, color='green', label='$\gamma$ = 0.5')
plt.title('Cumulative Rewards over 100 episodes for $\gamma$ values', fontsize=14)
plt.xlabel('Episodes', fontsize=14)
plt.ylabel('Reward', fontsize=14)
# plt.plot(epocs, epsilons, color='red')
plt.grid(True)
plt.legend()
plt.savefig('plots/graph_5.png')
plt.show()

